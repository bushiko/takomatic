DIRECTIONS API
https://developers.google.com/maps/documentation/directions/intro?hl=es-419

CUSTOM MARKER
https://developers.google.com/maps/documentation/javascript/custom-markers

MAYBE SSE?
http://stackoverflow.com/questions/29541775/laravel-5-use-server-sent-events-to-push-messages-to-browser

explore MapBox (?)

http://angular-ui.github.io/ui-leaflet/#!/examples/simple-map

-99.180532,19.423934;-99.16893119999999,19.4143384
https://api.mapbox.com/directions/v5/mapbox/walking/-99.180532%2C19.423934%3B-99.16893119999999%2C19.4143384.json?access_token=pk.eyJ1IjoiYnVzaGlrbyIsImEiOiJjaXlxNWQ5b2QwMDA0MzNqeWF0cnJpZjZjIn0.E285dGJXFW58Qm6q-GdmIg&steps=true&overview=false

https://maps.googleapis.com/maps/api/directions/json?origin=Toronto&destination=Montreal&key=AIzaSyDIlyw3fC4QRIJaxf8O4_Usybp-30Onh8I



origin=19.4319723,-99.13340439999999

destination=19.2798589,-99.65565909999999


-- Encontrar la distancia más corta entre dos puntos
-- utilizando formula "haversine"

a = sin²(Δφ/2) + cos φ1 ⋅ cos φ2 ⋅ sin²(Δλ/2)
c = 2 ⋅ atan2( √a, √(1−a) )
d = R ⋅ c

... 
  φ = latitude, debe estar en radianes
  λ = longitude, debe estar en radianes
  R = radio de la tierra 6,371km 


Implementación en js
------
    function getDistanceFromLatLonInKm(lat1,lon1,lat2,lon2) {
      var R = 6371; // Radius of the earth in km
      var dLat = deg2rad(lat2-lat1);  // deg2rad below
      var dLon = deg2rad(lon2-lon1); 
      var a = 
        Math.sin(dLat/2) * Math.sin(dLat/2) +
        Math.cos(deg2rad(lat1)) * Math.cos(deg2rad(lat2)) * 
        Math.sin(dLon/2) * Math.sin(dLon/2)
        ; 
      var c = 2 * Math.atan2(Math.sqrt(a), Math.sqrt(1-a)); 
      var d = R * c; // Distance in km
      return d;
    }

    function deg2rad(deg) {
      return deg * (Math.PI/180)
    }

--- REQERIMIENTOS

ENTIDADES:
  * CLIENT
  * DRIVER


METODOS DEL API:
  * clients               PUT || PATCH
  * drivers               PUT || PATCH
  * client/{ID}/position       PUT || PATCH
  * driver/{ID}/position       PUT || PATCH

  * /drivers              GET
  * /clients              GET

DIFERENCIACIÓN ENTRE client y driver

LÍNEA (walking) driver -> closestclient

PAUSAR LA APP? (cliente o servidor?)

--- IDEA, IN PROGRESS...

Creo que ya tengo algo mejor pensado:

  * Usar PUSHER para mantener sincronizados a los clientes con eventos como:
    - new_user (driver || client)
    - user_location_change
    - user_deleted

  * Crear rutas aleatorias por user en el servidor y :
  * Usar colas.. (RabbitMQ? IronMQ?) para agendar jobs que actualizarán la posición dependiendo la ruta
  * El cliente solo va a encargarse de actualizar la posición de los markers cada que reciba el evento
    user_location_change

----- EXTRAS


MOSTRAR TRACE
MONTAR INSTANCIA EN UN SERVIDOR LIVE
SIMULACIÓN COHERENTE DE DRIVERS Y CLIENTS
